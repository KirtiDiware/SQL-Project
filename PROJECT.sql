CREATE DATABASE IF NOT EXISTS PROJ_DB;
USE PROJ_DB;
SET default_storage_engine = INNODB;
CREATE TABLE IF NOT EXISTS PROJ_DB.EMP_RECORDS (
EMP_ID VARCHAR(4) NOT NULL PRIMARY KEY,
FIRST_NAME VARCHAR(100) NOT NULL,
LAST_NAME VARCHAR(100),
GENDER VARCHAR(1) NOT NULL,
ROLE VARCHAR(100) NOT NULL,
DEPT VARCHAR(100) NOT NULL,
EXP INTEGER NOT NULL CHECK (EXP >= 0),
COUNTRY VARCHAR(80) NOT NULL,
CONTINENT VARCHAR(50) NOT NULL,
MANAGER_ID VARCHAR(100),
CONSTRAINT empid_check CHECK ( SUBSTR(EMP_ID,1,1) = 'E'),
CONSTRAINT gender_check CHECK(GENDER in ('M', 'F', 'O'))
) ENGINE=INNODB;
DESCRIBE PROJ_DB.EMP_RECORDS;
INSERT INTO PROJ_DB.EMP_RECORDS(EMP_ID,FIRST_NAME,LAST_NAME,GENDER,ROLE,DEPT,EXP,COUNTRY,CONTINENT,MANAGER_ID) VALUES

('E001','Arthur','Black','M','CEO','ALL',20,'USA','NORTH AMERICA','E001'),
('E002','Cynthia','Brooks','F','PRESIDENT','ALL',17,'CANADA','NORTH AMERICA','E001'),
('E005','Eric','Hoffman','M','LEAD DATA SCIENTIST','FINANCE',11,'USA','NORTH AMERICA','E103'),
('E052','Dianna','Wilson','F','SENIOR DATA SCIENTIST','HEALTHCARE',6,'CANADA','NORTH AMERICA','E083'),
('E057','Dorothy','Wilson','F','SENIOR DATA SCIENTIST','HEALTHCARE',9,'USA','NORTH AMERICA','E083'),
('E083','Patrick','Voltz','M','MANAGER','HEALTHCARE',15,'USA','NORTH AMERICA','E002'),
('E103','Emily','Grove','F','MANAGER','FINANCE',14,'CANADA','NORTH AMERICA','E002'),
('E245','Nian','Zhen','M','SENIOR DATA SCIENTIST','RETAIL',6,'CHINA','ASIA','E583'),
('E260','Roy','Collins','M','SENIOR DATA SCIENTIST','RETAIL',7,'INDIA','ASIA','E583'),
('E403','Steve','Hoffman','M','ASSOCIATE DATA SCIENTIST','FINANCE',4,'USA','NORTH AMERICA','E103'),
('E428','Pete','Allen','M','MANAGER','AUTOMOTIVE',14,'GERMANY',	'EUROPE','E002'),
('E505','Chad','Wilson','M','ASSOCIATE DATA SCIENTIST','HEALTHCARE',5,'CANADA','NORTH AMERICA','E083'),
('E532','Claire','Brennan','F','ASSOCIATE DATA SCIENTIST','AUTOMOTIVE',3,'GERMANY','EUROPE','E428'),
('E583','Janet','Hale','F','MANAGER','RETAIL',14,'COLOMBIA','SOUTH AMERICA','E002'),
('E612','Tracy','Norris','F','Manager','RETAIL',13,'INIA','ASIA','E002'),
('E620','Katrina','Allen','F','JUNIOR DATA SCIENTIST','RETAIL',2,'INDIA','ASIA','E583'),
('E640','Jenifer','Jhones','F','JUNIOR DATA SCIENTIST','RETAIL',1,'COLOMBIA','SOUTH AMERICA','E583');

SELECT * FROM PROJ_DB.EMP_RECORDS;

CREATE TABLE IF NOT EXISTS PROJ_DB.PROJ_RECORDS (
PROJ_ID VARCHAR(4) NOT NULL PRIMARY KEY,
PROJ_NAME VARCHAR(200) NOT NULL,
DOMAIN VARCHAR(100) NOT NULL,
START_DATE DATE NOT NULL,
CLOSURE_DATE DATE NOT NULL,
DEV_QTR VARCHAR(2) NOT NULL,
STATUS VARCHAR(7),
CONSTRAINT projid_check CHECK ( SUBSTR(PROJ_ID,1,1) = 'P'),
CONSTRAINT check_start_date CHECK (START_DATE >= '2021-04-01'),
CONSTRAINT check_closure_date CHECK (CLOSURE_DATE <= '2022-03-30'),
CONSTRAINT chk_qtr CHECK (DEV_QTR IN ('Q1', 'Q2', 'Q3', 'Q4')),
CONSTRAINT chk_status CHECK (STATUS IN ('YTS', 'WIP', 'DONE', 'DELAYED'))
) ENGINE=INNODB;

DESCRIBE PROJ_DB.PROJ_RECORDS;

INSERT INTO
PROJ_DB.PROJ_RECORDS(PROJ_ID,PROJ_NAME,DOMAIN,START_DATE,CLOSURE_DATE,DEV_QTR,STATUS)
VALUES
("P103","Drug Discovery","HEALTHCARE","2021-04-06","2021-06-20","Q1","DONE"),
("P105","Fraud Detection","FINANCE","2021-04-11","2021-06-25","Q1","DONE"),
("P109","Market Basket Analysis","RETAIL","2021-04-12","2021-06-21","Q1","DELAYED"),
('P302','Early Detection of Lung Cancer','HEALTHCARE','2021-10-08','2021-12-18','Q3','YTS'),
('P406','Customer Sentiment Analysis','RETAIL','2021-07-09','2021-09-24','Q2','WIP');

SELECT * FROM PROJ_DB.PROJ_RECORDS;

CREATE TABLE IF NOT EXISTS PROJ_DB.PROJ_ASSIGN (
EMP_ID VARCHAR(4) NOT NULL,
PROJ_ID VARCHAR(4) NOT NULL,
CONSTRAINT empid_check_2 CHECK ( SUBSTR(EMP_ID,1,1) = 'E'),
CONSTRAINT projid_check_2 CHECK ( SUBSTR(PROJ_ID,1,1) = 'P'),
FOREIGN KEY(EMP_ID) REFERENCES PROJ_DB.EMP_RECORDS(EMP_ID),
FOREIGN KEY(PROJ_ID) REFERENCES PROJ_DB.PROJ_RECORDS(PROJ_ID)
) ENGINE=INNODB;
DESCRIBE PROJ_DB.PROJ_ASSIGN;

INSERT INTO PROJ_DB.PROJ_ASSIGN(EMP_ID,PROJ_ID)VALUES 
("E052","P103"),
("E505","P103"),
("E583","P406"),
('E583','P109'),
('E620','P406'),
('E245','P109'),
('E640','P406'),
('E005','P105'),
('E057','P103'),
('E403','P105'),
('E103','P105'),
('E083','P103');
SELECT * FROM PROJ_DB.PROJ_ASSIGN;

SELECT CONCAT_WS(', ', LAST_NAME, FIRST_NAME)
FROM PROJ_DB.EMP_RECORDS
WHERE DEPT = "HEALTHCARE";

SELECT CONCAT_WS(', ', LAST_NAME, FIRST_NAME) AS `FULL
NAME`
FROM PROJ_DB.EMP_RECORDS
WHERE DEPT = "HEALTHCARE";

SELECT e.FIRST_NAME, e.LAST_NAME
FROM PROJ_DB.EMP_RECORDS e
WHERE e.DEPT = "HEALTHCARE";

 #INNER JOIN with ON
SELECT e.EMP_ID,e.FIRST_NAME,e.LAST_NAME,e.DEPT,e.MANAGER_ID,p.PROJ_ID  FROM EMP_RECORDS e
inner join PROJ_ASSIGN p ON e.EMP_ID = p.EMP_ID
WHERE e.ROLE NOT IN ('MANAGER', 'PRESIDENT', 'CEO')
ORDER BY e.MANAGER_ID;

#INNER JOIN with USING
SELECT
e.EMP_ID, e.FIRST_NAME, e.LAST_NAME,
e.DEPT, e.MANAGER_ID,
p.PROJ_ID
FROM
EMP_RECORDS e
INNER JOIN PROJ_ASSIGN p USING(EMP_ID)
WHERE e.ROLE NOT IN ("MANAGER", "PRESIDENT", "CEO")
ORDER BY e.MANAGER_ID;

#LEFT JOIN with ON
SELECT p.PROJ_ID , p.PROJ_NAME , p.DOMAIN, COUNT(DISTINCT a.EMP_ID ) AS EMP_COUNT, p.DEV_QTR, p.STATUS
FROM  PROJ_RECORDS p LEFT JOIN PROJ_ASSIGN a ON p.PROJ_ID = a.PROJ_ID
WHERE p.STATUS IN ('DONE', 'WIP')
group by p.proj_id
ORDER BY p.PROJ_ID;

#LEFT JOIN with USING
SELECT
p.PROJ_ID, p.PROJ_NAME, p.DOMAIN,
COUNT(DISTINCT a.EMP_ID) AS EMP_COUNT,
p.DEV_QTR, p.STATUS
FROM
PROJ_RECORDS p
LEFT JOIN PROJ_ASSIGN a USING(PROJ_ID)
WHERE p.STATUS IN ("DONE", "WIP")
GROUP BY p.PROJ_id
ORDER BY p.PROJ_ID;

#Right join with on
SELECT
e.EMP_ID, e.FIRST_NAME, e.LAST_NAME,
e.ROLE, e.DEPT, e.MANAGER_ID,
COUNT(DISTINCT a.PROJ_ID) AS `PROJ_COUNT`
FROM
PROJ_ASSIGN a
RIGHT JOIN EMP_RECORDS e ON a.EMP_ID = e.EMP_ID
WHERE e.ROLE NOT IN ("MANAGER", "PRESIDENT", "CEO")
GROUP BY e.EMP_ID
ORDER BY e.MANAGER_ID;

#right join with using
SELECT
e.EMP_ID, e.FIRST_NAME, e.LAST_NAME,
e.ROLE, e.DEPT, e.MANAGER_ID,
COUNT(DISTINCT a.PROJ_ID) AS `PROJ_COUNT`
FROM
PROJ_ASSIGN a
RIGHT JOIN EMP_RECORDS e USING(EMP_ID)
WHERE e.ROLE NOT IN ("MANAGER", "PRESIDENT", "CEO")
GROUP BY e.EMP_ID
ORDER BY e.MANAGER_ID;

#cross join
SELECT
e.EMP_ID, e.FIRST_NAME, e.LAST_NAME,
e.DEPT, e.MANAGER_ID,
a.PROJ_ID
FROM
PROJ_ASSIGN a
CROSS JOIN EMP_RECORDS e
WHERE e.ROLE NOT IN ("MANAGER", "PRESIDENT", "CEO")
ORDER BY e.FIRST_NAME;

#SELF JOIN using INNER JOIN
SELECT
m.EMP_ID, m.FIRST_NAME, m.LAST_NAME, m.ROLE,
m.EXP, m.DEPT, COUNT(e.EMP_ID) as "EMP_COUNT"
FROM
EMP_RECORDS m
INNER JOIN EMP_RECORDS e
ON m.EMP_ID = e.MANAGER_ID
AND e.EMP_ID != e.MANAGER_ID
WHERE m.ROLE IN ("MANAGER", "PRESIDENT", "CEO")
GROUP BY m.EMP_ID
ORDER BY m.EMP_ID;

#SELF JOIN using LEFT JOIN
SELECT
m.EMP_ID, m.FIRST_NAME, m.LAST_NAME, m.ROLE,
m.EXP, m.DEPT, COUNT(e.EMP_ID) AS `EMP_COUNT`
FROM
EMP_RECORDS m
LEFT JOIN EMP_RECORDS e
ON m.EMP_ID = e.MANAGER_ID
AND e.EMP_ID != e.MANAGER_ID
WHERE m.ROLE IN ("MANAGER", "PRESIDENT", "CEO")
GROUP BY m.EMP_ID
ORDER BY m.EMP_ID;

#union operator
SELECT e.EMP_ID,
CONCAT(e.FIRST_NAME,' ',e.LAST_NAME) AS `FULL_NAME`,
e.DEPT
FROM EMP_RECORDS e
WHERE e.ROLE IN ("MANAGER")
UNION
SELECT p.PROJ_ID, p.PROJ_NAME, p.DOMAIN
FROM PROJ_RECORDS p
ORDER BY DEPT, EMP_ID;

SELECT e.EMP_ID,
CONCAT(e.FIRST_NAME,' ',e.LAST_NAME) AS `FULL_NAME`,
e.DEPT
FROM EMP_RECORDS e
WHERE e.ROLE IN ("MANAGER")
UNION
SELECT p.PROJ_ID, p.PROJ_NAME, p.DOMAIN
FROM PROJ_RECORDS p
ORDER BY DEPT, EMP_ID;

#intersect
SELECT DISTINCT e.EMP_ID
FROM EMP_RECORDS e
INNER JOIN PROJ_ASSIGN p USING(EMP_ID)
WHERE e.ROLE IN ("MANAGER")
ORDER BY e.EMP_ID;

SELECT DISTINCT e.EMP_ID
FROM EMP_RECORDS e
WHERE e.EMP_ID IN (
SELECT a.EMP_ID
FROM PROJ_ASSIGN a
) AND e.ROLE IN ("MANAGER")
ORDER BY e.EMP_ID;

#minus operator
SELECT
p.PROJ_ID
FROM
PROJ_RECORDS p
LEFT JOIN
PROJ_ASSIGN a USING (PROJ_ID)
WHERE
a.PROJ_ID IS NULL;

#subquery
SELECT m.DEPT, COUNT(DISTINCT m.EMP_ID) AS `MANAGER_COUNT`,
( SELECT COUNT(DISTINCT e.EMP_ID) FROM EMP_RECORDS e
WHERE e.ROLE NOT IN ("MANAGER", "PRESIDENT", "CEO")
AND e.DEPT IN ("RETAIL") ) AS `TEAM_STRENGTH`
FROM EMP_RECORDS m
WHERE m.ROLE IN ("MANAGER") AND m.DEPT IN ("RETAIL");

SELECT p.PROJ_ID, p.PROJ_NAME, p.DOMAIN
FROM PROJ_RECORDS p
WHERE p.PROJ_ID NOT IN (
SELECT DISTINCT a.PROJ_ID
FROM PROJ_ASSIGN a
) AND p.STATUS IN ("YTS");

SELECT
e.EMP_ID,
CONCAT(e.FIRST_NAME,' ',e.LAST_NAME) AS `FULL_NAME`,
e.ROLE, e.DEPT
FROM EMP_RECORDS e
WHERE e.EXP = (SELECT MAX(EXP) FROM EMP_RECORDS);

SELECT
e.EMP_ID, e.FIRST_NAME, e.LAST_NAME, e.ROLE, e.DEPT
FROM EMP_RECORDS e
WHERE e.EMP_ID NOT IN (
SELECT DISTINCT a.EMP_ID FROM PROJ_ASSIGN a
) AND e.ROLE IN ("MANAGER");

SELECT
e.EMP_ID,
CONCAT(e.FIRST_NAME,' ',e.LAST_NAME) AS `FULL_NAME`,
e.ROLE, e.DEPT, e.EXP
FROM EMP_RECORDS e
WHERE e.EXP >= ANY (SELECT AVG(EXP) FROM EMP_RECORDS)
LIMIT 5;

SELECT
e.EMP_ID,
CONCAT(e.FIRST_NAME,' ',e.LAST_NAME) AS `FULL_NAME`,
e.ROLE, e.DEPT, e.EXP
FROM EMP_RECORDS e
WHERE e.EXP < ALL (SELECT AVG(EXP) FROM EMP_RECORDS);

SELECT PROJ_NAME
FROM PROJ_RECORDS
WHERE EXISTS (
SELECT PROJ_ID
FROM PROJ_ASSIGN
) ORDER BY PROJ_ID;

SELECT
MAX(EXP) AS `MAX_EXP`, MIN(EXP) AS `MIN_EXP`,
FLOOR(AVG(EXP)) AS `AVG_EXP`
FROM (
SELECT EMP_ID, EXP FROM EMP_RECORDS
GROUP BY EXP ORDER BY EXP
) AS TOTAL_EXP;

Error Code: 1055. Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'proj_db.EMP_RECORDS.EMP_ID' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by

